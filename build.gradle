buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.8+'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "http://mente.github.io/facebook-api-android-aar"
    }
    maven {
        url 'http://repo1.maven.org/maven2'
    }
    maven {
        url 'https://github.com/astuetz/PagerSlidingTabStrip'
    }
    maven {
        url 'http://download.crashlytics.com/maven'
    }
}

apply plugin: 'android'
apply plugin: 'crashlytics'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.facebook:facebook-android-sdk:+@aar'
    compile 'com.loopj.android:android-async-http:1.4.4'
    compile 'com.astuetz:pagerslidingtabstrip:1.0.1'
    compile 'com.android.support:support-v4:18.0.+'
    compile 'com.google.code.gson:gson:2.1'
    compile 'com.makeramen:roundedimageview:1.2.4'
    compile 'org.apache.commons:commons-lang3:3.1'
    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.1'
    compile "com.mixpanel.android:mixpanel-android:4.0.0@aar"
    compile 'com.crashlytics.android:crashlytics:1.+'
    compile 'com.google.android.gms:play-services:4.0.30'
}

android {
    compileSdkVersion 18
    buildToolsVersion "19"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    // Configure release certificate signing if the secrets.properties file exists
    if (file("secrets.properties").exists()) {
        Properties props = new Properties();
        props.load(new FileInputStream(file("secrets.properties")))

        signingConfigs {
            release {
                storeFile file(props['release.storeFile'])
                storePassword props['release.storePassword']
                keyAlias props['release.keyAlias']
                keyPassword props['release.keyPassword']
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
                runProguard true
                proguardFile file('proguard-project.txt')
                proguardFile getDefaultProguardFile('proguard-android.txt')
            }
        }
    } else {
        System.out.println("File 'secrets.properties' not found. Will not generate signed release APK.");
    }
}
